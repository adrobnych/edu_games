package com.example.snowflakegrowth;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;


import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.Display;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;


enum Board{
	instance;
	public List<Particle> particles = null;
    public int DIMENTION_OF_ARRAY = 100;
    public Particle[][] arrayOfParticles = null;
    public Point centerOfScreen = new Point();
    
}


class Particle{
	public static Point centerOfScreen;
	
	public Paint colorPaint;
    public int x, y;
    public ArrayList<Path> _graphics = new ArrayList<Path>();
    
	public Particle(int x, int y) {
		this.x = x;
		this.y = y;
		create_graphics();
		Point positionInArray = toArrayCoordinates();
		Board.instance.arrayOfParticles[positionInArray.x][positionInArray.y] = this;
	}
	
	 public static Particle createParticlePlaceholder(int x, int y) {
			Particle placeholder = new Particle();
			placeholder.x = x;
			placeholder.y = y;
			return placeholder;
		}
	 
	public Particle() {
		// TODO Auto-generated constructor stub
	}
	
	public Point toArrayCoordinates(){
		Point point = new Point();
		int delta = 0;
		if(((y - Board.instance.centerOfScreen.y)/2)%2 != 0)
			delta = -1;
		point.x = (x + delta - Board.instance.centerOfScreen.x)/2  +  Board.instance.DIMENTION_OF_ARRAY/2;
		point.y = (y - Board.instance.centerOfScreen.y)/2  +  Board.instance.DIMENTION_OF_ARRAY/2;
//		if(((point.y - Board.instance.centerOfScreen.y)/2)%2 != 0)
//			point.x = point.x - 1;
		return point;
	}
	
	private void create_graphics() {
		initPaint(this);
		Path path = new Path();
    	path.moveTo(x,y);
    	path.lineTo(x+1, y);
    	_graphics.add(path);
    	path = new Path();
    	path.moveTo(x+1,y);
    	path.lineTo(x+1, y+1);
    	_graphics.add(path);
    	path = new Path();
    	path.moveTo(x+1,y+1);
    	path.lineTo(x, y+1);
		_graphics.add(path);
	}
	
	private void initPaint(Particle particleOne){
    	particleOne.colorPaint = new Paint();
    	particleOne.colorPaint.setDither(true);
    	particleOne.colorPaint.setColor(0xFFFFFFFF);
    	particleOne.colorPaint.setStyle(Paint.Style.STROKE);
    	//particleOne.colorPaint.setStrokeJoin(Paint.Join.ROUND);
    	//particleOne.colorPaint.setStrokeCap(Paint.Cap.ROUND);
    	particleOne.colorPaint.setStrokeWidth(1);
    }

	public List<Point> getNeighbours() {
		List<Point> resultList = new LinkedList<Point>();
		
		if(((y - Board.instance.centerOfScreen.y)/2)%2 == 0){
		
			resultList.add(new Point(toArrayCoordinates().x - 1, toArrayCoordinates().y));
			resultList.add(new Point(toArrayCoordinates().x + 1, toArrayCoordinates().y));
			resultList.add(new Point(toArrayCoordinates().x - 2, toArrayCoordinates().y));
			resultList.add(new Point(toArrayCoordinates().x + 2, toArrayCoordinates().y));

			resultList.add(new Point(toArrayCoordinates().x - 1, toArrayCoordinates().y - 1));
			resultList.add(new Point(toArrayCoordinates().x, toArrayCoordinates().y - 1 ));

			resultList.add(new Point(toArrayCoordinates().x - 1, toArrayCoordinates().y + 1));
			resultList.add(new Point(toArrayCoordinates().x, toArrayCoordinates().y + 1 ));
			
			resultList.add(new Point(toArrayCoordinates().x + 1, toArrayCoordinates().y - 2));
			resultList.add(new Point(toArrayCoordinates().x - 1, toArrayCoordinates().y - 2));
			
			resultList.add(new Point(toArrayCoordinates().x + 1, toArrayCoordinates().y + 2));
			resultList.add(new Point(toArrayCoordinates().x - 1, toArrayCoordinates().y + 2));
		
		}
		else{
			
			resultList.add(new Point(toArrayCoordinates().x - 1, toArrayCoordinates().y));
			resultList.add(new Point(toArrayCoordinates().x + 1, toArrayCoordinates().y));
			resultList.add(new Point(toArrayCoordinates().x - 2, toArrayCoordinates().y));
			resultList.add(new Point(toArrayCoordinates().x + 2, toArrayCoordinates().y));
			
			resultList.add(new Point(toArrayCoordinates().x, toArrayCoordinates().y - 1));
			resultList.add(new Point(toArrayCoordinates().x + 1, toArrayCoordinates().y - 1 ));
			
			resultList.add(new Point(toArrayCoordinates().x, toArrayCoordinates().y + 1));
			resultList.add(new Point(toArrayCoordinates().x + 1, toArrayCoordinates().y + 1 ));
			
			resultList.add(new Point(toArrayCoordinates().x - 1, toArrayCoordinates().y -2));
			resultList.add(new Point(toArrayCoordinates().x + 1, toArrayCoordinates().y -2));
			
			resultList.add(new Point(toArrayCoordinates().x - 1, toArrayCoordinates().y +2));
			resultList.add(new Point(toArrayCoordinates().x + 1, toArrayCoordinates().y +2));
			
		}	
		
		return resultList;
	}
}


public class MainActivity extends ActionBarActivity {
    
    double temperature = 3.5;

    @Override
    public void onCreate(Bundle savedInstanceState) 
    {
        super.onCreate(savedInstanceState);
        setContentView(new DrawingPanel(this));
        Board.instance.particles = new LinkedList<Particle>();
    	Board.instance.arrayOfParticles = new Particle[Board.instance.DIMENTION_OF_ARRAY][Board.instance.DIMENTION_OF_ARRAY];
     
        initParticles();
    }
    

    
    @SuppressLint("NewApi") private Point getScreenSize(){
    	Display display = getWindowManager().getDefaultDisplay();
    	final Point size = new Point();
    	if(android.os.Build.VERSION.SDK_INT >= 13)
    		display.getSize(size);
    	else{
    		size.x = display.getWidth();
    		size.y = display.getHeight();
    	}
    	return size;
    }
    
    private void initParticles(){
    	Point size_of_view = getScreenSize();
    	int x = size_of_view.x/2;
    	int y = size_of_view.y/2 - 50;
    	Board.instance.centerOfScreen.x = x;
    	Board.instance.centerOfScreen.y = y;
    	
    	Particle particle = new Particle(x-1, y-2);
    	Board.instance.particles.add(particle); 
    	particle = new Particle(x+1, y-2);
    	Board.instance.particles.add(particle); 
    	particle = new Particle(x, y);
    	Board.instance.particles.add(particle);
    	particle = new Particle(x-2, y);
    	Board.instance.particles.add(particle);
    	particle = new Particle(x+2, y);
    	Board.instance.particles.add(particle);
    	particle = new Particle(x-1, y+2);
    	Board.instance.particles.add(particle); 
    	particle = new Particle(x+1, y+2);
    	Board.instance.particles.add(particle); 
    	particle = new Particle(x-4, y);
    	Board.instance.particles.add(particle);
    	particle = new Particle(x+4, y);
    	Board.instance.particles.add(particle);
    	particle = new Particle(x-2, y - 4);
    	Board.instance.particles.add(particle);
    	particle = new Particle(x+2, y - 4);
    	Board.instance.particles.add(particle);
    	particle = new Particle(x-2, y + 4);
    	Board.instance.particles.add(particle);
    	particle = new Particle(x+2, y + 4);
    	Board.instance.particles.add(particle);
    	  
    }
    
    
    
    public Point toScreenCoordinates(int arrX, int arrY){
		Point point = new Point();
	
		point.x = Board.instance.centerOfScreen.x + (arrX - Board.instance.DIMENTION_OF_ARRAY/2) * 2;
		point.y = Board.instance.centerOfScreen.y + (arrY - Board.instance.DIMENTION_OF_ARRAY/2) * 2;
		if((arrY - Board.instance.DIMENTION_OF_ARRAY/2)%2 != 0)
			point.x = point.x + 1;
		return point;
	}
    
    

    class DrawingPanel extends SurfaceView implements SurfaceHolder.Callback 
    {
        private DrawingThread _thread;
        private Path path;

        public DrawingPanel(Context context) 
        {
           super(context);
           run_new_thread();
        }
        
        private void run_new_thread(){
        	getHolder().addCallback(this);
            _thread = new DrawingThread(getHolder(), this);
        }


        public boolean onTouchEvent(MotionEvent event) 
        {
            synchronized (_thread.getSurfaceHolder()) {
                if(event.getAction() == MotionEvent.ACTION_DOWN){
                	_thread._non_stop = false;
//                }else if(event.getAction() == MotionEvent.ACTION_MOVE){
//                    path.lineTo(event.getX(), event.getY());
                }else if(event.getAction() == MotionEvent.ACTION_UP){
                	_thread._non_stop = true;
                }
                
                return true;
            }
        }

        int flag = 10;
        @Override
        synchronized public void onDraw(Canvas canvas) {
        	if(true)//--flag >= 0){
        	next_step();

        	canvas.drawColor(Color.BLACK);
        	for(Particle p : Board.instance.particles){

        		for (Path path : p._graphics){
        			//Log.e("show_debug", "path: " + path);
                    canvas.drawPath(path, p.colorPaint);
                    
        		}
        	}
        }
        
        Random rand = new Random();
        int randomNum = 0;
        
        synchronized private void next_step(){
        	int min = 1, max = 8;
        	randomNum =  rand.nextInt((max - min) + 1) + min;
        	 
        	List<Particle> newParticles = new LinkedList<Particle>();
        	
        	recalculate(newParticles);
        	
        	Board.instance.particles = newParticles;
//        	//born
//        	List<Particle> borned = new LinkedList<Particle>();
//        	for(Particle p : Board.instance.particles){
//        		born_particles(p, borned);
//        	}
//
//        	
//        	
//        	//die
//        	List<Particle> zombies = new LinkedList<Particle>();
//        	for(Particle p : Board.instance.particles){
//        		kill_particles(p, zombies);
//        	}
//        	
//        	
//        	Board.instance.particles.removeAll(zombies);
//        	Board.instance.particles.addAll(borned);
//        	
        }
        
        private void recalculate(List<Particle> newParticles) {
			for(int x=3; x<Board.instance.DIMENTION_OF_ARRAY - 3; x++)
				for(int y=3; y<Board.instance.DIMENTION_OF_ARRAY - 3; y++)
					if(born(x, y)){
						Point screenCoords = toScreenCoordinates(x, y);
						Particle bornParticle = new Particle(screenCoords.x, screenCoords.y);
	        			newParticles.add(bornParticle);
					}
		}
        
        

		private boolean born(int arrx, int arry) {
			Point screenCoords = toScreenCoordinates(arrx, arry);
			if(born_condition(screenCoords.x, screenCoords.y)){
    			return true;
    		}
        	return false;
		}

		private void kill_particles(Particle p, List<Particle> zombies) {
        	if(kill_condition(p.x, p.y)){ // || !born_condition(p.x, p.y)){
        			zombies.add(p); 
        	}
			
		}

		private boolean kill_condition(int x, int y) {
			boolean result = false;
			Particle placeholder = Particle.createParticlePlaceholder(x, y);
			int counter = 0;
			for(Point p : placeholder.getNeighbours()){
				if(Board.instance.arrayOfParticles[p.x][p.y] != null)
					counter++;
			}
			//Log.d("show_debug", "counter: " + counter);
			return (counter > randomNum) ? true  : false;
			//return (counter % 2 ==0)? true : false;
		}

		private void born_particles(Particle p, List<Particle> borned){
        	List<Point> neighbours = p.getNeighbours();
        	//Log.d("show_debug", "^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
        	for(Point n : neighbours){
        		//Log.d("show_debug", " " + n.x + " : " + n.y);
        		Point screenCoords = toScreenCoordinates(n.x, n.y);
        		if((Board.instance.arrayOfParticles[n.x][n.y] == null) && born_condition(screenCoords.x, screenCoords.y)){
        			Particle bornParticle = new Particle(screenCoords.x, screenCoords.y);
        			borned.add(bornParticle);
        		}
        	}
        }
        

        private boolean born_condition(int x, int y) {
			boolean result = false;
			Particle placeholder = Particle.createParticlePlaceholder(x, y);
			int counter = 0;
			for(Point p : placeholder.getNeighbours()){
				if(Board.instance.arrayOfParticles[p.x][p.y] != null)
					counter++;
			}
			//Log.d("show_debug", "counter: " + counter);
			//return (counter >= 4)? true : false;
			//return (counter >= 3)? true : false;
			//if(counter > randomNum) return false;
			//return (counter % 2 !=0)? true : false;
			return (counter >= 2)? true : false;
		}

		@Override
        public void surfaceChanged(SurfaceHolder holder, int format, int width,
                                   int height) {
            // TODO Auto-generated method stub

        }

        @Override
        public void surfaceCreated(SurfaceHolder holder) {
            // TODO Auto-generated method stub
            _thread.setRunning(true);
            _thread.start();
        }

        @Override
        public void surfaceDestroyed(SurfaceHolder holder) {
            // TODO Auto-generated method stub
        	_thread.setRunning(false);
        }
    }

    @SuppressLint("WrongCall") class DrawingThread extends Thread {
        private SurfaceHolder _surfaceHolder;
        private DrawingPanel _panel;
        private boolean _run = false;
        public boolean _non_stop = true;

        public DrawingThread(SurfaceHolder surfaceHolder, DrawingPanel panel) {
            _surfaceHolder = surfaceHolder;
            _panel = panel;
        }

        public void setRunning(boolean run) {
            _run = run;
        }

        public SurfaceHolder getSurfaceHolder() {
            return _surfaceHolder;
        }

        @Override
        public void run() {
            Canvas c;
            while (_run) {
                c = null;
                try {
                    c = _surfaceHolder.lockCanvas(null);
                    synchronized (_surfaceHolder) {
                    	
                    	if(_run  && _non_stop){
                        _panel.onDraw(c);
                    	}
                    
                    }
                } finally {
                    if (c != null) {
                        _surfaceHolder.unlockCanvasAndPost(c);
                    }
                }
            }
        }
    }
}