package com.example.snowflake;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.os.Bundle;
import android.view.Display;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;


public class MainActivity extends  Activity   
{
    List<Particle> particles;
    double temperature = 3.5;

    @Override
    public void onCreate(Bundle savedInstanceState) 
    {
        super.onCreate(savedInstanceState);
        setContentView(new DrawingPanel(this));
        Path path = new Path();
        
        initParticles();
    }
    
    @SuppressLint("NewApi") private Point getScreenSize(){
    	Display display = getWindowManager().getDefaultDisplay();
    	final Point size = new Point();
    	if(android.os.Build.VERSION.SDK_INT >= 13)
    		display.getSize(size);
    	else{
    		size.x = display.getWidth();
    		size.y = display.getHeight();
    	}
    	return size;
    }
    
    private void initParticles(){
    	Particle particleOne = new Particle();
    	particleOne.colorPaint = new Paint();
    	particleOne.colorPaint.setDither(true);
    	particleOne.colorPaint.setColor(0xFFFFFF00);
    	particleOne.colorPaint.setStyle(Paint.Style.STROKE);
    	particleOne.colorPaint.setStrokeJoin(Paint.Join.ROUND);
    	particleOne.colorPaint.setStrokeCap(Paint.Cap.ROUND);
    	particleOne.colorPaint.setStrokeWidth(2);
    	Point size_of_view = getScreenSize();
    	particleOne.cur_X = size_of_view.x/2;
    	particleOne.cur_Y = (size_of_view.y - 100)/2;
    	particles.add(particleOne);        
    }
    
    class Particle{
    	private Paint colorPaint;
        private int cur_X, cur_Y;
        private ArrayList<Path> _graphics = new ArrayList<Path>();
    }

    class DrawingPanel extends SurfaceView implements SurfaceHolder.Callback 
    {
        private DrawingThread _thread;
        private Path path;

        public DrawingPanel(Context context) 
        {
           super(context);
           run_new_thread();
        }
        
        private void run_new_thread(){
        	getHolder().addCallback(this);
            _thread = new DrawingThread(getHolder(), this);
        }


        public boolean onTouchEvent(MotionEvent event) 
        {
            synchronized (_thread.getSurfaceHolder()) {
                if(event.getAction() == MotionEvent.ACTION_DOWN){
                	_thread._non_stop = false;
//                }else if(event.getAction() == MotionEvent.ACTION_MOVE){
//                    path.lineTo(event.getX(), event.getY());
                }else if(event.getAction() == MotionEvent.ACTION_UP){
                	_thread._non_stop = true;
                }
                
                return true;
            }
        }

        @Override
        public void onDraw(Canvas canvas) {
        	for(Particle p : particles){
        	path = new Path();
        	path.moveTo(p.cur_X, p.cur_Y);
        	Random r = new Random();
        	p.cur_X += (int) Math.round(temperature * r.nextGaussian());
        	p.cur_Y += (int) Math.round(temperature * r.nextGaussian());
        	path.lineTo(p.cur_X, p.cur_Y);
        	p._graphics.add(path);
//            canvas.drawPath(path, mPaint);
        	if(p._graphics.size() > 10)
            for (Path path : p._graphics.subList(p._graphics.size()-10, p._graphics.size()-1)) {
                //canvas.drawPoint(graphic.x, graphic.y, mPaint);
                canvas.drawPath(path, p.colorPaint);
            }
        	else
        		for (Path path : p._graphics)
                    canvas.drawPath(path, p.colorPaint);
        	}
        }

        @Override
        public void surfaceChanged(SurfaceHolder holder, int format, int width,
                                   int height) {
            // TODO Auto-generated method stub

        }

        @Override
        public void surfaceCreated(SurfaceHolder holder) {
            // TODO Auto-generated method stub
            _thread.setRunning(true);
            _thread.start();
        }

        @Override
        public void surfaceDestroyed(SurfaceHolder holder) {
            // TODO Auto-generated method stub
        	_thread.setRunning(false);
        }
    }

    @SuppressLint("WrongCall") class DrawingThread extends Thread {
        private SurfaceHolder _surfaceHolder;
        private DrawingPanel _panel;
        private boolean _run = false;
        public boolean _non_stop = true;

        public DrawingThread(SurfaceHolder surfaceHolder, DrawingPanel panel) {
            _surfaceHolder = surfaceHolder;
            _panel = panel;
        }

        public void setRunning(boolean run) {
            _run = run;
        }

        public SurfaceHolder getSurfaceHolder() {
            return _surfaceHolder;
        }

        @Override
        public void run() {
            Canvas c;
            while (_run) {
                c = null;
                try {
                    c = _surfaceHolder.lockCanvas(null);
                    synchronized (_surfaceHolder) {
                    	
                    	if(_run  && _non_stop){
                        _panel.onDraw(c);
                    	}
                    
                    }
                } finally {
                    if (c != null) {
                        _surfaceHolder.unlockCanvasAndPost(c);
                    }
                }
            }
        }
    }
}